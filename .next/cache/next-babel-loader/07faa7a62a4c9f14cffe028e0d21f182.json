{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Link from \"next/link\";\nimport { formatNumber } from \"../../helpers/function\";\nimport { decryptData } from \"../../store/actions/cartActions\";\nimport { decryptInfoData } from \"../../store/actions/infoActions\";\n\nfunction OrderSummary(props) {\n  var _useState = useState(false),\n      isCampaign = _useState[0],\n      setisCampaign = _useState[1];\n\n  var _useState2 = useState([]),\n      cart = _useState2[0],\n      setcart = _useState2[1];\n\n  var _useState3 = useState(0),\n      total = _useState3[0],\n      settotal = _useState3[1];\n\n  useEffect(function () {\n    var decryptedData = decryptInfoData();\n\n    if (decryptedData) {\n      if (decryptedData.delivery_date.value == \"2023-02-14\") {\n        setisCampaign(true);\n      }\n    }\n  }, []);\n  useEffect(function () {\n    var myProd = props.products.length ? props.products : localStorage.getItem(process.env.CART_COOKIE) ? decryptData(localStorage.getItem(process.env.CART_COOKIE)) : [];\n\n    if (myProd.length <= 0) {\n      alert(\"You dont have any items in your cart.\");\n      return window.location.href = \"/\";\n    }\n\n    var myTotal = 0;\n\n    for (var i = 0; i < myProd.length; i++) {\n      if (isCampaign) {\n        myTotal = myTotal + myProd[i].campaign_price * myProd[i].quantity;\n      } else {\n        myTotal = myTotal + myProd[i].discount_price * myProd[i].quantity;\n      }\n    }\n\n    setcart(myProd);\n    settotal(myTotal);\n  }, [props.products, isCampaign]);\n  return __jsx(\"div\", {\n    className: \"order-table table-responsive\"\n  }, __jsx(\"table\", {\n    className: \"table table-bordered\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", {\n    scope: \"col\"\n  }, \"Product Name\"), __jsx(\"th\", {\n    scope: \"col\"\n  }, \"Total\"))), __jsx(\"tbody\", null, cart.map(function (data, idx) {\n    return __jsx(\"tr\", {\n      key: idx\n    }, __jsx(\"td\", {\n      className: \"product-name\"\n    }, __jsx(Link, {\n      href: \"/product/\".concat(data.slug)\n    }, __jsx(\"a\", null, data.name, \" \", \"\", \" \", data.quantity, \"x\"))), __jsx(\"td\", {\n      className: \"product-total\"\n    }, __jsx(\"span\", {\n      className: \"subtotal-amount\"\n    }, \"\\u20B1\", isCampaign ? formatNumber(data.campaign_price * data.quantity) : formatNumber(data.discount_price * data.quantity))));\n  }), total < 800 && __jsx(\"tr\", null, __jsx(\"td\", {\n    className: \"order-subtotal\"\n  }, __jsx(\"span\", null, \"Service Charge\")), __jsx(\"td\", {\n    className: \"order-subtotal-price\"\n  }, __jsx(\"span\", {\n    className: \"order-subtotal-amount\"\n  }, \"\\u20B1\", formatNumber(800 - total)))), __jsx(\"tr\", null, __jsx(\"td\", {\n    className: \"order-subtotal\"\n  }, __jsx(\"span\", null, \"Cart Subtotal\")), __jsx(\"td\", {\n    className: \"order-subtotal-price\"\n  }, __jsx(\"span\", {\n    className: \"order-subtotal-amount\"\n  }, \"\\u20B1\", formatNumber(total < 800 ? 800 : total)))), __jsx(\"tr\", null, __jsx(\"td\", {\n    className: \"total-price\"\n  }, __jsx(\"span\", null, \"Order Total\")), __jsx(\"td\", {\n    className: \"product-subtotal\"\n  }, __jsx(\"span\", {\n    className: \"subtotal-amount\"\n  }, \" \", \"\\u20B1\", formatNumber(total < 800 ? 800 : total)))))), total < 800 && __jsx(\"p\", {\n    style: {\n      color: \"red\",\n      textAlign: \"center\"\n    }\n  }, \"Minimum order is \\u20B1800. If order is below \\u20B1800, you will be charge to get to the 800 limit.\"));\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    products: state.addedItems,\n    total: state.total,\n    shipping: state.shipping\n  };\n};\n\nexport default connect(mapStateToProps)(OrderSummary);","map":null,"metadata":{},"sourceType":"module"}