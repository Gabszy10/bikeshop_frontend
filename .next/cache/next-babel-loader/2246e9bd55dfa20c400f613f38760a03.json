{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport Router from \"next/router\";\nimport { decryptInfoData, encryptInfoData } from \"../../store/actions/infoActions\";\n\nfunction useForm(stateSchema, validationSchema = {}, callback, handleStateChange) {\n  const {\n    0: state,\n    1: setState\n  } = useState(stateSchema);\n  const {\n    0: disable,\n    1: setDisable\n  } = useState(true);\n  const {\n    0: isDirty,\n    1: setIsDirty\n  } = useState(false);\n  useEffect(() => {\n    let decryptedData = decryptInfoData();\n\n    if (decryptedData) {\n      // if (\n      //   !decryptedData.delivery_date.value ||\n      //   !decryptedData.delivery_time.value\n      // ) {\n      //   alert(\"Please input delivery date and time\");\n      //   window.location.href = \"/cart\";\n      // } else {\n      //   setState(decryptedData);\n      // }\n      setState(decryptedData);\n    }\n  }, []);\n  useEffect(() => {\n    setDisable(true);\n  }, []);\n  useEffect(() => {\n    if (isDirty) {\n      setDisable(validateState());\n    }\n  }, [state, isDirty]); // Used to disable submit button if there's an error in state\n  // or the required field in state has no value.\n  // Wrapped in useCallback to cached the function to avoid instensive memory leaked\n  // in every re-render in component\n\n  const validateState = useCallback(() => {\n    const hasErrorInState = Object.keys(validationSchema).some(key => {\n      const isInputFieldRequired = validationSchema[key].required; // Get state value\n\n      const stateValue = state[key].value;\n      const stateError = state[key].error;\n      return isInputFieldRequired && !stateValue || stateError;\n    });\n    return hasErrorInState;\n  }, [state, validationSchema]);\n\n  function handleOnChange(event) {\n    setIsDirty(true);\n    const name = event.target.name;\n    const value = event.target.value;\n    let error = \"\";\n\n    if (validationSchema[name].required) {\n      if (!value) {\n        error = \"This is required field.\";\n      }\n    }\n\n    if (validationSchema[name].validator !== null && typeof validationSchema[name].validator === \"object\") {\n      if (validationSchema[name].validator.regEx) {\n        if (value && !validationSchema[name].validator.regEx.test(value)) {\n          error = validationSchema[name].validator.error;\n        }\n      }\n    }\n\n    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [name]: {\n        value,\n        error\n      }\n    })); // handleStateChange(event);\n  }\n\n  function handleOnSubmit(event) {\n    event.preventDefault(); // Making sure that validateState returns false\n    // Before calling the submit callback function\n\n    if (!validateState()) {// callback();\n    }\n  }\n\n  return {\n    state,\n    disable,\n    handleOnChange,\n    handleOnSubmit,\n    setState\n  };\n}\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/corde/Desktop/New folder/bikeshop/bikeshop_frontend/components/checkout/userForm.js"],"names":["useState","useEffect","useCallback","Router","decryptInfoData","encryptInfoData","useForm","stateSchema","validationSchema","callback","handleStateChange","state","setState","disable","setDisable","isDirty","setIsDirty","decryptedData","validateState","hasErrorInState","Object","keys","some","key","isInputFieldRequired","required","stateValue","value","stateError","error","handleOnChange","event","name","target","validator","regEx","test","prevState","handleOnSubmit","preventDefault"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport Router from \"next/router\";\r\nimport {\r\n  decryptInfoData,\r\n  encryptInfoData,\r\n} from \"../../store/actions/infoActions\";\r\n\r\nfunction useForm(\r\n  stateSchema,\r\n  validationSchema = {},\r\n  callback,\r\n  handleStateChange\r\n) {\r\n  const [state, setState] = useState(stateSchema);\r\n  const [disable, setDisable] = useState(true);\r\n  const [isDirty, setIsDirty] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let decryptedData = decryptInfoData();\r\n    if (decryptedData) {\r\n      // if (\r\n      //   !decryptedData.delivery_date.value ||\r\n      //   !decryptedData.delivery_time.value\r\n      // ) {\r\n      //   alert(\"Please input delivery date and time\");\r\n      //   window.location.href = \"/cart\";\r\n      // } else {\r\n      //   setState(decryptedData);\r\n      // }\r\n      setState(decryptedData);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setDisable(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isDirty) {\r\n      setDisable(validateState());\r\n    }\r\n  }, [state, isDirty]);\r\n\r\n  // Used to disable submit button if there's an error in state\r\n  // or the required field in state has no value.\r\n  // Wrapped in useCallback to cached the function to avoid instensive memory leaked\r\n  // in every re-render in component\r\n  const validateState = useCallback(() => {\r\n    const hasErrorInState = Object.keys(validationSchema).some((key) => {\r\n      const isInputFieldRequired = validationSchema[key].required;\r\n      // Get state value\r\n      const stateValue = state[key].value;\r\n      const stateError = state[key].error;\r\n\r\n      return (isInputFieldRequired && !stateValue) || stateError;\r\n    });\r\n\r\n    return hasErrorInState;\r\n  }, [state, validationSchema]);\r\n\r\n  function handleOnChange(event) {\r\n    setIsDirty(true);\r\n\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    let error = \"\";\r\n    if (validationSchema[name].required) {\r\n      if (!value) {\r\n        error = \"This is required field.\";\r\n      }\r\n    }\r\n\r\n    if (\r\n      validationSchema[name].validator !== null &&\r\n      typeof validationSchema[name].validator === \"object\"\r\n    ) {\r\n      if (validationSchema[name].validator.regEx) {\r\n        if (value && !validationSchema[name].validator.regEx.test(value)) {\r\n          error = validationSchema[name].validator.error;\r\n        }\r\n      }\r\n    }\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [name]: { value, error },\r\n    }));\r\n\r\n    // handleStateChange(event);\r\n  }\r\n\r\n  function handleOnSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    // Making sure that validateState returns false\r\n    // Before calling the submit callback function\r\n    if (!validateState()) {\r\n      // callback();\r\n    }\r\n  }\r\n\r\n  return { state, disable, handleOnChange, handleOnSubmit, setState };\r\n}\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}