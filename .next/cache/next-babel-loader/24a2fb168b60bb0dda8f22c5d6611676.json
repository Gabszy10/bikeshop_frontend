{"ast":null,"code":"var __jsx = React.createElement;\nimport { set } from \"js-cookie\";\nimport React, { useEffect, useState } from \"react\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport { decryptData } from \"../../store/actions/cartActions\";\nimport { decryptInfoData } from \"../../store/actions/infoActions\";\n\nfunction Paypal(props) {\n  const {\n    0: paymentOptions,\n    1: setpaymentOptions\n  } = useState(null);\n  const {\n    0: isCampaign,\n    1: setisCampaign\n  } = useState(false);\n  const {\n    0: memo,\n    1: setmemo\n  } = useState(\"\");\n  useEffect(() => {\n    let decryptedData = decryptInfoData();\n\n    if (decryptedData) {\n      if (decryptedData.delivery_date.value == \"2023-02-14\") {\n        setisCampaign(true);\n      }\n\n      setmemo(`\n      ${decryptedData.billing_phone.value}\n      ${decryptedData.billing_email.value}\n      ${decryptedData.delivery_time.value}\n      ${decryptedData.delivery_date.value}\n      ${decryptedData.note.value}\n      ${decryptedData.message.value}\n      ${decryptedData.shipping_phone.value}\n      ${decryptedData.shipping_address.value}\n      `);\n    }\n  }, []);\n  useEffect(() => {\n    let encryptedData = localStorage.getItem(process.env.CART_COOKIE);\n    let cart = decryptData(encryptedData);\n    let total = 0;\n    let items = [];\n\n    for (let i = 0; i < cart.length; i++) {\n      let obj = null;\n\n      if (isCampaign) {\n        obj = {\n          name: cart[i].name,\n          quantity: cart[i].quantity,\n          price: cart[i].campaign_price,\n          currency: \"PHP\"\n        };\n      } else {\n        obj = {\n          name: cart[i].name,\n          quantity: cart[i].quantity,\n          price: cart[i].discount_price,\n          currency: \"PHP\"\n        };\n      }\n\n      items.push(obj);\n\n      if (isCampaign) {\n        total = total + cart[i].campaign_price * cart[i].quantity;\n      } else {\n        total = total + cart[i].discount_price * cart[i].quantity;\n      }\n    }\n\n    total = total + 120;\n    items.push({\n      name: \"Paypal Transfer Fee\",\n      quantity: 1,\n      price: 120,\n      currency: \"PHP\"\n    });\n    setpaymentOptions({\n      intent: \"authorize\",\n      payer: {\n        payment_method: \"paypal\"\n      },\n      transactions: [{\n        amount: {\n          total: total,\n          currency: \"PHP\"\n        },\n        description: memo,\n        item_list: {\n          items\n        }\n      }],\n      note_to_payer: \"Contact us for any questions on your order.\",\n      redirect_urls: {\n        return_url: \"https://example.com/return\",\n        cancel_url: \"https://example.com/cancel\"\n      }\n    });\n  }, [isCampaign, memo]);\n\n  const onSuccess = payment => {\n    // 1, 2, and ... Poof! You made it, everything's fine and dandy!\n    console.log(\"Payment successful!\", payment); // You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\n\n    props.handleSubmit(\"Paypal\");\n  };\n\n  const onCancel = data => {\n    // The user pressed \"cancel\" or closed the PayPal popup\n    console.log(\"Payment cancelled!\", data); // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\n  };\n\n  const onError = err => {\n    // The main Paypal script could not be loaded or something blocked the script from loading\n    console.log(\"Error!\", err); // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\n    // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\n  };\n\n  let env = process.env.PAYPAL_CONFIG; // you can set this string to 'production'\n\n  let currency = \"PHP\"; // you can set this string from your props or state\n\n  let total = 1; // this is the total amount (based on currency) to charge\n  // Document on Paypal's currency code: https://developer.paypal.com/docs/classic/api/currency_codes/\n\n  const client = {\n    sandbox: process.env.PAYPAL_SANDBOX,\n    production: process.env.PAYPAL_LIVE\n  }; // In order to get production's app-ID, you will have to send your app to Paypal for approval first\n  // For your sandbox Client-ID (after logging into your developer account, please locate the \"REST API apps\" section, click \"Create App\" unless you have already done so):\n  //   => https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\n  // Note: IGNORE the Sandbox test AppID - this is ONLY for Adaptive APIs, NOT REST APIs)\n  // For production app-ID:\n  //   => https://developer.paypal.com/docs/classic/lifecycle/goingLive/\n  // NB. You can also have many Paypal express checkout buttons on page, just pass in the correct amount and they will work!\n\n  return __jsx(PaypalExpressBtn, {\n    paymentOptions: paymentOptions,\n    env: env,\n    client: client,\n    currency: currency,\n    total: total,\n    onError: onError,\n    onSuccess: onSuccess,\n    onCancel: onCancel\n  });\n}\n\nexport default Paypal;","map":null,"metadata":{},"sourceType":"module"}