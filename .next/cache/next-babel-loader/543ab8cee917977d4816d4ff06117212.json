{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport cookie from \"js-cookie\";\n\nvar CryptoJS = require(\"crypto-js\");\n\nlet host = process.env.API_URL;\nexport const userRegister = (userData, setIsLoading, cb) => async dispatch => {\n  try {\n    const res = await axios.post(`${host}/api/user/auth/signUp`, userData); // // save the new token from our fucking api to the cookies\n\n    if (res.status === 200) {\n      const {\n        token\n      } = await res.data;\n      cookie.set(\"_wus_BJK\", token, {\n        expires: 7\n      });\n      cb();\n    }\n  } catch (err) {\n    setIsLoading(false);\n    console.log(err);\n\n    if (err.response.data.error) {\n      return toast.error(err.response.data.error);\n    }\n\n    if (err.response.data.details[0].message) {\n      return toast.error(err.response.data.details[0].message);\n    }\n  }\n};\nexport const userLogin = (userData, setIsLoading, cb) => async dispatch => {\n  try {\n    const res = await axios.post(`${host}/api/user/auth/signIn`, userData); // // save the new token from our fucking api to the cookies\n\n    if (res.status === 200) {\n      const {\n        token\n      } = await res.data;\n      cookie.set(\"_wus_BJK\", token, {\n        expires: 7\n      });\n      cb();\n    }\n  } catch (err) {\n    setIsLoading(false);\n    console.log(err);\n\n    if (err.response.data.error) {\n      return toast.error(err.response.data.error);\n    }\n\n    if (err.response.data.details[0].message) {\n      return toast.error(err.response.data.details[0].message);\n    }\n  }\n};\nexport const logout = () => {\n  cookie.remove(\"_wus_BJK\");\n  window.location.href = \"/\";\n};\nexport const encryptUserData = data => {\n  try {\n    let encryptedData = CryptoJS.AES.encrypt(JSON.stringify(data), process.env.USER_KEY).toString();\n    localStorage.setItem(process.env.USER_COOKIE, encryptedData);\n    return true;\n  } catch (error) {\n    console.log(error);\n    localStorage.removeItem(process.env.USER_COOKIE);\n    return false;\n  }\n};\nexport const decryptUserData = () => {\n  try {\n    let infoItem = localStorage.getItem(process.env.USER_COOKIE) ? localStorage.getItem(process.env.USER_COOKIE) : null;\n\n    if (infoItem) {\n      let bytes = CryptoJS.AES.decrypt(infoItem, process.env.USER_KEY);\n      let stringArray = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      return stringArray;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.log(error);\n    localStorage.removeItem(process.env.USER_COOKIE);\n    return false;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}