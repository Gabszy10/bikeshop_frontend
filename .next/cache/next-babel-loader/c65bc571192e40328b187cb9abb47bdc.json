{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { removeItem, addQuantity, subtractQuantity, decryptData, encryptData } from \"../../store/actions/cartActions\";\nimport { ToastContainer, toast, Slide } from \"react-toastify\";\nimport { debounce, formatNumber } from \"../../helpers/function\";\n\nfunction CartProduct(props) {\n  const dispatch = useDispatch();\n  const {\n    0: cart,\n    1: setcart\n  } = useState([]);\n  let host = process.env.API_URL;\n  useEffect(() => {\n    let encryptedData = localStorage.getItem(process.env.CART_COOKIE) ? localStorage.getItem(process.env.CART_COOKIE) : [];\n    let myProd = decryptData(encryptedData);\n    setcart(myProd);\n  }, [props.products]);\n\n  const handleRemove = id => {\n    props.removeItem(id);\n    toast.error(\"Removed from cart\", {\n      position: \"bottom-left\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true\n    });\n    props.setcart([]);\n  }; //\n\n\n  const handleQuantity = debounce((e, product) => {\n    let cartStorage = localStorage.getItem(process.env.CART_COOKIE);\n    let cartArray = decryptData(cartStorage);\n    var index = cartArray.findIndex(item => item.id === product.id);\n\n    if (index > -1) {\n      cartArray[index][\"quantity\"] = e;\n    }\n\n    let encryptedData = encryptData(JSON.stringify(cartArray));\n    localStorage.setItem(process.env.CART_COOKIE, encryptedData);\n    setcart(cartArray);\n    props.setcart([]);\n    dispatch((() => {\n      return {\n        type: \"UPDATE_CART\"\n      };\n    })());\n  }, 250);\n  let cartItems = cart.length ? cart.map((data, idx) => {\n    return __jsx(\"tr\", {\n      key: idx\n    }, __jsx(\"td\", {\n      className: \"product-thumbnail\"\n    }, __jsx(Link, {\n      href: `/product/${data.slug}`\n    }, __jsx(\"a\", null, __jsx(\"img\", {\n      src: `${host}/products/${data.product_images[0][\"file_name\"]}`,\n      alt: \"image\"\n    })))), __jsx(\"td\", {\n      className: \"product-name\"\n    }, __jsx(Link, {\n      href: \"#\"\n    }, __jsx(\"a\", null, data.name))), __jsx(\"td\", {\n      className: \"product-quantity\"\n    }, __jsx(\"div\", {\n      className: \"input-counter\"\n    }, __jsx(\"input\", {\n      type: \"number\",\n      defaultValue: data.quantity,\n      min: \"1\",\n      max: 100,\n      readOnly: false,\n      onChange: e => handleQuantity(e.target.value, data)\n    }))), __jsx(\"td\", {\n      className: \"product-price\"\n    }, __jsx(\"span\", {\n      className: \"unit-amount\"\n    }, \"\\u20B1\", props.isCampaign ? formatNumber(data.campaign_price) : formatNumber(data.discount_price))), __jsx(\"td\", {\n      className: \"product-subtotal\"\n    }, __jsx(\"span\", {\n      className: \"subtotal-amount\"\n    }, \"\\u20B1\", props.isCampaign ? formatNumber(data.campaign_price * data.quantity) : formatNumber(data.discount_price * data.quantity))), __jsx(\"td\", {\n      className: \"product-subtotal\"\n    }, __jsx(Link, {\n      href: \"#\"\n    }, __jsx(\"a\", {\n      style: {\n        float: \"none\"\n      },\n      className: \"remove\",\n      onClick: e => {\n        e.preventDefault();\n        handleRemove(data.id);\n      }\n    }, __jsx(\"i\", {\n      className: \"far fa-trash-alt\"\n    })))));\n  }) : __jsx(\"tr\", null, __jsx(\"td\", {\n    className: \"product-thumbnail\",\n    colSpan: \"5\"\n  }, __jsx(\"p\", null, \"Empty.\")));\n  return __jsx(React.Fragment, null, __jsx(ToastContainer, {\n    transition: Slide\n  }), __jsx(\"table\", {\n    className: \"table table-bordered\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", {\n    scope: \"col\"\n  }, \"Product\"), __jsx(\"th\", {\n    scope: \"col\"\n  }, \"Name\"), __jsx(\"th\", {\n    scope: \"col\"\n  }, \"Quantity\"), __jsx(\"th\", {\n    scope: \"col\"\n  }, \"Unit Price\"), __jsx(\"th\", {\n    scope: \"col\"\n  }, \"Total\"), __jsx(\"th\", {\n    scope: \"col\"\n  }, \"REMOVE\"))), __jsx(\"tbody\", null, cartItems)));\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.addedItems,\n    total: state.total\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    removeItem: id => {\n      dispatch(removeItem(id));\n    },\n    addQuantity: id => {\n      dispatch(addQuantity(id));\n    },\n    subtractQuantity: id => {\n      dispatch(subtractQuantity(id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartProduct);","map":null,"metadata":{},"sourceType":"module"}