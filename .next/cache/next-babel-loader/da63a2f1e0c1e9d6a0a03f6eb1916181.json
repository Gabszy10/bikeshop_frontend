{"ast":null,"code":"var CryptoJS = require(\"crypto-js\");\n\nexport const encryptInfoData = data => {\n  try {\n    let encryptedData = CryptoJS.AES.encrypt(JSON.stringify(data), process.env.INFO_KEY).toString();\n    localStorage.setItem(process.env.INFO_COOKIE, encryptedData);\n    return true;\n  } catch (error) {\n    console.log(error);\n    localStorage.removeItem(process.env.INFO_COOKIE);\n    return false;\n  }\n};\nexport const decryptInfoData = () => {\n  try {\n    let infoItem = localStorage.getItem(process.env.INFO_COOKIE) ? localStorage.getItem(process.env.INFO_COOKIE) : null;\n\n    if (infoItem) {\n      let bytes = CryptoJS.AES.decrypt(infoItem, process.env.INFO_KEY);\n      let stringArray = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      return stringArray;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.log(error);\n    localStorage.removeItem(process.env.INFO_COOKIE);\n    return false;\n  }\n};\nexport const encryptString = data => {\n  try {\n    let encryptedData = encodeURIComponent(CryptoJS.AES.encrypt(JSON.stringify(data), process.env.INFO_KEY).toString());\n    return encryptedData;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n};\nexport const decryptString = data => {\n  try {\n    if (data) {\n      let bytes = CryptoJS.AES.decrypt(data, process.env.INFO_KEY);\n      let stringArray = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      return decodeURIComponent(stringArray);\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}